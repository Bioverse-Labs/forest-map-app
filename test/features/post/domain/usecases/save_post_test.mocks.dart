// Mocks generated by Mockito 5.4.0 from annotations
// in forest_map/test/features/post/domain/usecases/save_post_test.dart.
// Do not manually edit this file.

// ignore_for_file: no_leading_underscores_for_library_prefixes
import 'dart:async' as _i4;
import 'dart:io' as _i7;

import 'package:dartz/dartz.dart' as _i2;
import 'package:forest_map/core/errors/failure.dart' as _i5;
import 'package:forest_map/features/catalog/domain/entities/catalog.dart'
    as _i8;
import 'package:forest_map/features/post/domain/entities/post.dart' as _i6;
import 'package:forest_map/features/post/domain/repositories/post_repository.dart'
    as _i3;
import 'package:mockito/mockito.dart' as _i1;

// ignore_for_file: type=lint
// ignore_for_file: avoid_redundant_argument_values
// ignore_for_file: avoid_setters_without_getters
// ignore_for_file: comment_references
// ignore_for_file: implementation_imports
// ignore_for_file: invalid_use_of_visible_for_testing_member
// ignore_for_file: prefer_const_constructors
// ignore_for_file: unnecessary_parenthesis
// ignore_for_file: camel_case_types
// ignore_for_file: subtype_of_sealed_class

class _FakeEither_0<L, R> extends _i1.SmartFake implements _i2.Either<L, R> {
  _FakeEither_0(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

/// A class which mocks [PostRepository].
///
/// See the documentation for Mockito's code generation for more information.
class MockPostRepository extends _i1.Mock implements _i3.PostRepository {
  MockPostRepository() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i4.Future<_i2.Either<_i5.Failure, List<_i6.Post>>> savePost({
    String? organizationId,
    String? userId,
    _i7.File? file,
    _i8.Catalog? category,
    int? dbh,
    String? landUse,
    String? specie,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #savePost,
          [],
          {
            #organizationId: organizationId,
            #userId: userId,
            #file: file,
            #category: category,
            #dbh: dbh,
            #landUse: landUse,
            #specie: specie,
          },
        ),
        returnValue: _i4.Future<_i2.Either<_i5.Failure, List<_i6.Post>>>.value(
            _FakeEither_0<_i5.Failure, List<_i6.Post>>(
          this,
          Invocation.method(
            #savePost,
            [],
            {
              #organizationId: organizationId,
              #userId: userId,
              #file: file,
              #category: category,
              #dbh: dbh,
              #landUse: landUse,
              #specie: specie,
            },
          ),
        )),
      ) as _i4.Future<_i2.Either<_i5.Failure, List<_i6.Post>>>);
  @override
  _i4.Future<
          _i2.Either<_i5.Failure,
              _i4.StreamController<_i2.Either<_i5.Failure, _i6.Post>>>>
      uploadCachedPost() => (super.noSuchMethod(
            Invocation.method(
              #uploadCachedPost,
              [],
            ),
            returnValue: _i4.Future<
                    _i2.Either<
                        _i5.Failure,
                        _i4.StreamController<
                            _i2.Either<_i5.Failure, _i6.Post>>>>.value(
                _FakeEither_0<_i5.Failure,
                    _i4.StreamController<_i2.Either<_i5.Failure, _i6.Post>>>(
              this,
              Invocation.method(
                #uploadCachedPost,
                [],
              ),
            )),
          ) as _i4.Future<
              _i2.Either<_i5.Failure,
                  _i4.StreamController<_i2.Either<_i5.Failure, _i6.Post>>>>);
  @override
  _i4.Future<_i2.Either<_i5.Failure, List<_i6.Post>>> getPosts(
          {required String? orgId}) =>
      (super.noSuchMethod(
        Invocation.method(
          #getPosts,
          [],
          {#orgId: orgId},
        ),
        returnValue: _i4.Future<_i2.Either<_i5.Failure, List<_i6.Post>>>.value(
            _FakeEither_0<_i5.Failure, List<_i6.Post>>(
          this,
          Invocation.method(
            #getPosts,
            [],
            {#orgId: orgId},
          ),
        )),
      ) as _i4.Future<_i2.Either<_i5.Failure, List<_i6.Post>>>);
}
