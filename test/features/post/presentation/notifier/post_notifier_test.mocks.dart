// Mocks generated by Mockito 5.4.3 from annotations
// in forest_map/test/features/post/presentation/notifier/post_notifier_test.dart.
// Do not manually edit this file.

// ignore_for_file: no_leading_underscores_for_library_prefixes
import 'dart:async' as _i5;

import 'package:dartz/dartz.dart' as _i2;
import 'package:forest_map/core/adapters/hive_adapter.dart' as _i11;
import 'package:forest_map/core/errors/failure.dart' as _i6;
import 'package:forest_map/core/usecases/usecase.dart' as _i10;
import 'package:forest_map/features/post/domain/entities/post.dart' as _i7;
import 'package:forest_map/features/post/domain/usecases/get_posts.dart' as _i8;
import 'package:forest_map/features/post/domain/usecases/save_post.dart' as _i4;
import 'package:forest_map/features/post/domain/usecases/upload_cached_post.dart'
    as _i9;
import 'package:hive/hive.dart' as _i3;
import 'package:mockito/mockito.dart' as _i1;
import 'package:mockito/src/dummies.dart' as _i12;

// ignore_for_file: type=lint
// ignore_for_file: avoid_redundant_argument_values
// ignore_for_file: avoid_setters_without_getters
// ignore_for_file: comment_references
// ignore_for_file: deprecated_member_use
// ignore_for_file: deprecated_member_use_from_same_package
// ignore_for_file: implementation_imports
// ignore_for_file: invalid_use_of_visible_for_testing_member
// ignore_for_file: prefer_const_constructors
// ignore_for_file: unnecessary_parenthesis
// ignore_for_file: camel_case_types
// ignore_for_file: subtype_of_sealed_class

class _FakeEither_0<L, R> extends _i1.SmartFake implements _i2.Either<L, R> {
  _FakeEither_0(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

class _FakeHiveInterface_1 extends _i1.SmartFake implements _i3.HiveInterface {
  _FakeHiveInterface_1(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

/// A class which mocks [SavePost].
///
/// See the documentation for Mockito's code generation for more information.
class MockSavePost extends _i1.Mock implements _i4.SavePost {
  MockSavePost() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i5.Future<_i2.Either<_i6.Failure, List<_i7.Post>>> call(
          _i4.SavePostParams? params) =>
      (super.noSuchMethod(
        Invocation.method(
          #call,
          [params],
        ),
        returnValue: _i5.Future<_i2.Either<_i6.Failure, List<_i7.Post>>>.value(
            _FakeEither_0<_i6.Failure, List<_i7.Post>>(
          this,
          Invocation.method(
            #call,
            [params],
          ),
        )),
      ) as _i5.Future<_i2.Either<_i6.Failure, List<_i7.Post>>>);
}

/// A class which mocks [GetPosts].
///
/// See the documentation for Mockito's code generation for more information.
class MockGetPosts extends _i1.Mock implements _i8.GetPosts {
  MockGetPosts() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i5.Future<_i2.Either<_i6.Failure, List<_i7.Post>>> call(
          _i8.GetPostsParams? params) =>
      (super.noSuchMethod(
        Invocation.method(
          #call,
          [params],
        ),
        returnValue: _i5.Future<_i2.Either<_i6.Failure, List<_i7.Post>>>.value(
            _FakeEither_0<_i6.Failure, List<_i7.Post>>(
          this,
          Invocation.method(
            #call,
            [params],
          ),
        )),
      ) as _i5.Future<_i2.Either<_i6.Failure, List<_i7.Post>>>);
}

/// A class which mocks [UploadCachedPost].
///
/// See the documentation for Mockito's code generation for more information.
class MockUploadCachedPost extends _i1.Mock implements _i9.UploadCachedPost {
  MockUploadCachedPost() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i5.Future<
          _i2.Either<_i6.Failure,
              _i5.StreamController<_i2.Either<_i6.Failure, _i7.Post>>>>
      call(_i10.NoParams? params) => (super.noSuchMethod(
            Invocation.method(
              #call,
              [params],
            ),
            returnValue: _i5.Future<
                    _i2.Either<
                        _i6.Failure,
                        _i5.StreamController<
                            _i2.Either<_i6.Failure, _i7.Post>>>>.value(
                _FakeEither_0<_i6.Failure,
                    _i5.StreamController<_i2.Either<_i6.Failure, _i7.Post>>>(
              this,
              Invocation.method(
                #call,
                [params],
              ),
            )),
          ) as _i5.Future<
              _i2.Either<_i6.Failure,
                  _i5.StreamController<_i2.Either<_i6.Failure, _i7.Post>>>>);
}

/// A class which mocks [HiveAdapter].
///
/// See the documentation for Mockito's code generation for more information.
class MockHiveAdapter<T> extends _i1.Mock implements _i11.HiveAdapter<T> {
  MockHiveAdapter() {
    _i1.throwOnMissingStub(this);
  }

  @override
  String get boxName => (super.noSuchMethod(
        Invocation.getter(#boxName),
        returnValue: _i12.dummyValue<String>(
          this,
          Invocation.getter(#boxName),
        ),
      ) as String);

  @override
  _i3.HiveInterface get hive => (super.noSuchMethod(
        Invocation.getter(#hive),
        returnValue: _FakeHiveInterface_1(
          this,
          Invocation.getter(#hive),
        ),
      ) as _i3.HiveInterface);

  @override
  _i5.Future<void> init() => (super.noSuchMethod(
        Invocation.method(
          #init,
          [],
        ),
        returnValue: _i5.Future<void>.value(),
        returnValueForMissingStub: _i5.Future<void>.value(),
      ) as _i5.Future<void>);

  @override
  _i5.Future<void> close() => (super.noSuchMethod(
        Invocation.method(
          #close,
          [],
        ),
        returnValue: _i5.Future<void>.value(),
        returnValueForMissingStub: _i5.Future<void>.value(),
      ) as _i5.Future<void>);

  @override
  _i5.Future<T?> get(String? id) => (super.noSuchMethod(
        Invocation.method(
          #get,
          [id],
        ),
        returnValue: _i5.Future<T?>.value(),
      ) as _i5.Future<T?>);

  @override
  Iterable<dynamic> getKeys() => (super.noSuchMethod(
        Invocation.method(
          #getKeys,
          [],
        ),
        returnValue: <dynamic>[],
      ) as Iterable<dynamic>);

  @override
  _i5.Future<void> put(
    String? id,
    T? payload,
  ) =>
      (super.noSuchMethod(
        Invocation.method(
          #put,
          [
            id,
            payload,
          ],
        ),
        returnValue: _i5.Future<void>.value(),
        returnValueForMissingStub: _i5.Future<void>.value(),
      ) as _i5.Future<void>);

  @override
  _i5.Future<void> delete(String? id) => (super.noSuchMethod(
        Invocation.method(
          #delete,
          [id],
        ),
        returnValue: _i5.Future<void>.value(),
        returnValueForMissingStub: _i5.Future<void>.value(),
      ) as _i5.Future<void>);

  @override
  _i5.Future<void> deleteAll() => (super.noSuchMethod(
        Invocation.method(
          #deleteAll,
          [],
        ),
        returnValue: _i5.Future<void>.value(),
        returnValueForMissingStub: _i5.Future<void>.value(),
      ) as _i5.Future<void>);
}
