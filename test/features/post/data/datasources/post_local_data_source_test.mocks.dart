// Mocks generated by Mockito 5.4.0 from annotations
// in forest_map/test/features/post/data/datasources/post_local_data_source_test.dart.
// Do not manually edit this file.

// ignore_for_file: no_leading_underscores_for_library_prefixes
import 'dart:async' as _i3;

import 'package:firebase_storage/firebase_storage.dart' as _i2;
import 'package:forest_map/core/adapters/hive_adapter.dart' as _i5;
import 'package:forest_map/core/util/uuid_generator.dart' as _i6;
import 'package:hive/hive.dart' as _i4;
import 'package:mockito/mockito.dart' as _i1;

// ignore_for_file: type=lint
// ignore_for_file: avoid_redundant_argument_values
// ignore_for_file: avoid_setters_without_getters
// ignore_for_file: comment_references
// ignore_for_file: implementation_imports
// ignore_for_file: invalid_use_of_visible_for_testing_member
// ignore_for_file: prefer_const_constructors
// ignore_for_file: unnecessary_parenthesis
// ignore_for_file: camel_case_types
// ignore_for_file: subtype_of_sealed_class

class _FakeFirebaseStorage_0 extends _i1.SmartFake
    implements _i2.FirebaseStorage {
  _FakeFirebaseStorage_0(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

class _FakeTaskSnapshot_1 extends _i1.SmartFake implements _i2.TaskSnapshot {
  _FakeTaskSnapshot_1(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

class _FakeFuture_2<T> extends _i1.SmartFake implements _i3.Future<T> {
  _FakeFuture_2(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

class _FakeHiveInterface_3 extends _i1.SmartFake implements _i4.HiveInterface {
  _FakeHiveInterface_3(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

/// A class which mocks [UploadTask].
///
/// See the documentation for Mockito's code generation for more information.
class MockUploadTask extends _i1.Mock implements _i2.UploadTask {
  MockUploadTask() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i2.FirebaseStorage get storage => (super.noSuchMethod(
        Invocation.getter(#storage),
        returnValue: _FakeFirebaseStorage_0(
          this,
          Invocation.getter(#storage),
        ),
      ) as _i2.FirebaseStorage);
  @override
  _i3.Stream<_i2.TaskSnapshot> get snapshotEvents => (super.noSuchMethod(
        Invocation.getter(#snapshotEvents),
        returnValue: _i3.Stream<_i2.TaskSnapshot>.empty(),
      ) as _i3.Stream<_i2.TaskSnapshot>);
  @override
  _i2.TaskSnapshot get snapshot => (super.noSuchMethod(
        Invocation.getter(#snapshot),
        returnValue: _FakeTaskSnapshot_1(
          this,
          Invocation.getter(#snapshot),
        ),
      ) as _i2.TaskSnapshot);
  @override
  _i3.Future<bool> pause() => (super.noSuchMethod(
        Invocation.method(
          #pause,
          [],
        ),
        returnValue: _i3.Future<bool>.value(false),
      ) as _i3.Future<bool>);
  @override
  _i3.Future<bool> resume() => (super.noSuchMethod(
        Invocation.method(
          #resume,
          [],
        ),
        returnValue: _i3.Future<bool>.value(false),
      ) as _i3.Future<bool>);
  @override
  _i3.Future<bool> cancel() => (super.noSuchMethod(
        Invocation.method(
          #cancel,
          [],
        ),
        returnValue: _i3.Future<bool>.value(false),
      ) as _i3.Future<bool>);
  @override
  _i3.Stream<_i2.TaskSnapshot> asStream() => (super.noSuchMethod(
        Invocation.method(
          #asStream,
          [],
        ),
        returnValue: _i3.Stream<_i2.TaskSnapshot>.empty(),
      ) as _i3.Stream<_i2.TaskSnapshot>);
  @override
  _i3.Future<_i2.TaskSnapshot> catchError(
    Function? onError, {
    bool Function(Object)? test,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #catchError,
          [onError],
          {#test: test},
        ),
        returnValue: _i3.Future<_i2.TaskSnapshot>.value(_FakeTaskSnapshot_1(
          this,
          Invocation.method(
            #catchError,
            [onError],
            {#test: test},
          ),
        )),
      ) as _i3.Future<_i2.TaskSnapshot>);
  @override
  _i3.Future<S> then<S>(
    _i3.FutureOr<S> Function(_i2.TaskSnapshot)? onValue, {
    Function? onError,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #then,
          [onValue],
          {#onError: onError},
        ),
        returnValue: _FakeFuture_2<S>(
          this,
          Invocation.method(
            #then,
            [onValue],
            {#onError: onError},
          ),
        ),
      ) as _i3.Future<S>);
  @override
  _i3.Future<_i2.TaskSnapshot> whenComplete(
          _i3.FutureOr<dynamic> Function()? action) =>
      (super.noSuchMethod(
        Invocation.method(
          #whenComplete,
          [action],
        ),
        returnValue: _i3.Future<_i2.TaskSnapshot>.value(_FakeTaskSnapshot_1(
          this,
          Invocation.method(
            #whenComplete,
            [action],
          ),
        )),
      ) as _i3.Future<_i2.TaskSnapshot>);
  @override
  _i3.Future<_i2.TaskSnapshot> timeout(
    Duration? timeLimit, {
    _i3.FutureOr<_i2.TaskSnapshot> Function()? onTimeout,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #timeout,
          [timeLimit],
          {#onTimeout: onTimeout},
        ),
        returnValue: _i3.Future<_i2.TaskSnapshot>.value(_FakeTaskSnapshot_1(
          this,
          Invocation.method(
            #timeout,
            [timeLimit],
            {#onTimeout: onTimeout},
          ),
        )),
      ) as _i3.Future<_i2.TaskSnapshot>);
}

/// A class which mocks [HiveAdapter].
///
/// See the documentation for Mockito's code generation for more information.
class MockHiveAdapter<T> extends _i1.Mock implements _i5.HiveAdapter<T> {
  MockHiveAdapter() {
    _i1.throwOnMissingStub(this);
  }

  @override
  String get boxName => (super.noSuchMethod(
        Invocation.getter(#boxName),
        returnValue: '',
      ) as String);
  @override
  _i4.HiveInterface get hive => (super.noSuchMethod(
        Invocation.getter(#hive),
        returnValue: _FakeHiveInterface_3(
          this,
          Invocation.getter(#hive),
        ),
      ) as _i4.HiveInterface);
  @override
  _i3.Future<void> init() => (super.noSuchMethod(
        Invocation.method(
          #init,
          [],
        ),
        returnValue: _i3.Future<void>.value(),
        returnValueForMissingStub: _i3.Future<void>.value(),
      ) as _i3.Future<void>);
  @override
  _i3.Future<void> close() => (super.noSuchMethod(
        Invocation.method(
          #close,
          [],
        ),
        returnValue: _i3.Future<void>.value(),
        returnValueForMissingStub: _i3.Future<void>.value(),
      ) as _i3.Future<void>);
  @override
  _i3.Future<T?> get(String? id) => (super.noSuchMethod(
        Invocation.method(
          #get,
          [id],
        ),
        returnValue: _i3.Future<T?>.value(),
      ) as _i3.Future<T?>);
  @override
  Iterable<dynamic> getKeys() => (super.noSuchMethod(
        Invocation.method(
          #getKeys,
          [],
        ),
        returnValue: <dynamic>[],
      ) as Iterable<dynamic>);
  @override
  _i3.Future<void> put(
    String? id,
    T? payload,
  ) =>
      (super.noSuchMethod(
        Invocation.method(
          #put,
          [
            id,
            payload,
          ],
        ),
        returnValue: _i3.Future<void>.value(),
        returnValueForMissingStub: _i3.Future<void>.value(),
      ) as _i3.Future<void>);
  @override
  _i3.Future<void> delete(String? id) => (super.noSuchMethod(
        Invocation.method(
          #delete,
          [id],
        ),
        returnValue: _i3.Future<void>.value(),
        returnValueForMissingStub: _i3.Future<void>.value(),
      ) as _i3.Future<void>);
  @override
  _i3.Future<void> deleteAll() => (super.noSuchMethod(
        Invocation.method(
          #deleteAll,
          [],
        ),
        returnValue: _i3.Future<void>.value(),
        returnValueForMissingStub: _i3.Future<void>.value(),
      ) as _i3.Future<void>);
}

/// A class which mocks [UUIDGenerator].
///
/// See the documentation for Mockito's code generation for more information.
class MockUUIDGenerator extends _i1.Mock implements _i6.UUIDGenerator {
  MockUUIDGenerator() {
    _i1.throwOnMissingStub(this);
  }

  @override
  String generateUID() => (super.noSuchMethod(
        Invocation.method(
          #generateUID,
          [],
        ),
        returnValue: '',
      ) as String);
}
