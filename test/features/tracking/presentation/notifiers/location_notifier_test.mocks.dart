// Mocks generated by Mockito 5.4.3 from annotations
// in forest_map/test/features/tracking/presentation/notifiers/location_notifier_test.dart.
// Do not manually edit this file.

// ignore_for_file: no_leading_underscores_for_library_prefixes
import 'dart:async' as _i4;

import 'package:dartz/dartz.dart' as _i2;
import 'package:forest_map/core/errors/failure.dart' as _i5;
import 'package:forest_map/core/usecases/usecase.dart' as _i7;
import 'package:forest_map/features/tracking/domain/entities/location.dart'
    as _i6;
import 'package:forest_map/features/tracking/domain/usecases/get_current_location.dart'
    as _i8;
import 'package:forest_map/features/tracking/domain/usecases/get_locations.dart'
    as _i9;
import 'package:forest_map/features/tracking/domain/usecases/save_location.dart'
    as _i10;
import 'package:forest_map/features/tracking/domain/usecases/track_user.dart'
    as _i3;
import 'package:mockito/mockito.dart' as _i1;

// ignore_for_file: type=lint
// ignore_for_file: avoid_redundant_argument_values
// ignore_for_file: avoid_setters_without_getters
// ignore_for_file: comment_references
// ignore_for_file: deprecated_member_use
// ignore_for_file: deprecated_member_use_from_same_package
// ignore_for_file: implementation_imports
// ignore_for_file: invalid_use_of_visible_for_testing_member
// ignore_for_file: prefer_const_constructors
// ignore_for_file: unnecessary_parenthesis
// ignore_for_file: camel_case_types
// ignore_for_file: subtype_of_sealed_class

class _FakeEither_0<L, R> extends _i1.SmartFake implements _i2.Either<L, R> {
  _FakeEither_0(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

/// A class which mocks [TrackUser].
///
/// See the documentation for Mockito's code generation for more information.
class MockTrackUser extends _i1.Mock implements _i3.TrackUser {
  MockTrackUser() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i4.Future<_i2.Either<_i5.Failure, _i4.Stream<_i6.Location>>> call(
          _i7.NoParams? params) =>
      (super.noSuchMethod(
        Invocation.method(
          #call,
          [params],
        ),
        returnValue:
            _i4.Future<_i2.Either<_i5.Failure, _i4.Stream<_i6.Location>>>.value(
                _FakeEither_0<_i5.Failure, _i4.Stream<_i6.Location>>(
          this,
          Invocation.method(
            #call,
            [params],
          ),
        )),
      ) as _i4.Future<_i2.Either<_i5.Failure, _i4.Stream<_i6.Location>>>);
}

/// A class which mocks [GetCurrentLocation].
///
/// See the documentation for Mockito's code generation for more information.
class MockGetCurrentLocation extends _i1.Mock
    implements _i8.GetCurrentLocation {
  MockGetCurrentLocation() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i4.Future<_i2.Either<_i5.Failure, _i6.Location>> call(
          _i7.NoParams? params) =>
      (super.noSuchMethod(
        Invocation.method(
          #call,
          [params],
        ),
        returnValue: _i4.Future<_i2.Either<_i5.Failure, _i6.Location>>.value(
            _FakeEither_0<_i5.Failure, _i6.Location>(
          this,
          Invocation.method(
            #call,
            [params],
          ),
        )),
      ) as _i4.Future<_i2.Either<_i5.Failure, _i6.Location>>);
}

/// A class which mocks [GetLocations].
///
/// See the documentation for Mockito's code generation for more information.
class MockGetLocations extends _i1.Mock implements _i9.GetLocations {
  MockGetLocations() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i4.Future<_i2.Either<_i5.Failure, List<_i6.Location>>> call(
          _i9.GetLocationsParams? params) =>
      (super.noSuchMethod(
        Invocation.method(
          #call,
          [params],
        ),
        returnValue:
            _i4.Future<_i2.Either<_i5.Failure, List<_i6.Location>>>.value(
                _FakeEither_0<_i5.Failure, List<_i6.Location>>(
          this,
          Invocation.method(
            #call,
            [params],
          ),
        )),
      ) as _i4.Future<_i2.Either<_i5.Failure, List<_i6.Location>>>);
}

/// A class which mocks [SaveLocation].
///
/// See the documentation for Mockito's code generation for more information.
class MockSaveLocation extends _i1.Mock implements _i10.SaveLocation {
  MockSaveLocation() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i4.Future<_i2.Either<_i5.Failure, void>> call(
          _i10.SaveLocationParams? params) =>
      (super.noSuchMethod(
        Invocation.method(
          #call,
          [params],
        ),
        returnValue: _i4.Future<_i2.Either<_i5.Failure, void>>.value(
            _FakeEither_0<_i5.Failure, void>(
          this,
          Invocation.method(
            #call,
            [params],
          ),
        )),
      ) as _i4.Future<_i2.Either<_i5.Failure, void>>);
}
