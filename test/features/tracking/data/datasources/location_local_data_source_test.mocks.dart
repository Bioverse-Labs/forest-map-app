// Mocks generated by Mockito 5.4.0 from annotations
// in forest_map/test/features/tracking/data/datasources/location_local_data_source_test.dart.
// Do not manually edit this file.

// ignore_for_file: no_leading_underscores_for_library_prefixes
import 'dart:async' as _i6;

import 'package:cloud_firestore/cloud_firestore.dart' as _i3;
import 'package:forest_map/core/adapters/firestore_adapter.dart' as _i8;
import 'package:forest_map/core/adapters/hive_adapter.dart' as _i9;
import 'package:forest_map/core/platform/location.dart' as _i5;
import 'package:forest_map/features/tracking/data/models/location_model.dart'
    as _i2;
import 'package:forest_map/features/tracking/domain/entities/location.dart'
    as _i7;
import 'package:hive/hive.dart' as _i4;
import 'package:mockito/mockito.dart' as _i1;

// ignore_for_file: type=lint
// ignore_for_file: avoid_redundant_argument_values
// ignore_for_file: avoid_setters_without_getters
// ignore_for_file: comment_references
// ignore_for_file: implementation_imports
// ignore_for_file: invalid_use_of_visible_for_testing_member
// ignore_for_file: prefer_const_constructors
// ignore_for_file: unnecessary_parenthesis
// ignore_for_file: camel_case_types
// ignore_for_file: subtype_of_sealed_class

class _FakeLocationModel_0 extends _i1.SmartFake implements _i2.LocationModel {
  _FakeLocationModel_0(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

class _FakeFirebaseFirestore_1 extends _i1.SmartFake
    implements _i3.FirebaseFirestore {
  _FakeFirebaseFirestore_1(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

class _FakeDocumentReference_2<T extends Object?> extends _i1.SmartFake
    implements _i3.DocumentReference<T> {
  _FakeDocumentReference_2(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

class _FakeDocumentSnapshot_3<T extends Object?> extends _i1.SmartFake
    implements _i3.DocumentSnapshot<T> {
  _FakeDocumentSnapshot_3(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

class _FakeCollectionReference_4<T extends Object?> extends _i1.SmartFake
    implements _i3.CollectionReference<T> {
  _FakeCollectionReference_4(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

class _FakeHiveInterface_5 extends _i1.SmartFake implements _i4.HiveInterface {
  _FakeHiveInterface_5(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

/// A class which mocks [LocationUtilsImpl].
///
/// See the documentation for Mockito's code generation for more information.
class MockLocationUtilsImpl extends _i1.Mock implements _i5.LocationUtilsImpl {
  MockLocationUtilsImpl() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i6.Future<bool> get isServiceEnabled => (super.noSuchMethod(
        Invocation.getter(#isServiceEnabled),
        returnValue: _i6.Future<bool>.value(false),
      ) as _i6.Future<bool>);
  @override
  _i6.Future<_i2.LocationModel> getLastKnowPosition(bool? hasPermission) =>
      (super.noSuchMethod(
        Invocation.method(
          #getLastKnowPosition,
          [hasPermission],
        ),
        returnValue: _i6.Future<_i2.LocationModel>.value(_FakeLocationModel_0(
          this,
          Invocation.method(
            #getLastKnowPosition,
            [hasPermission],
          ),
        )),
      ) as _i6.Future<_i2.LocationModel>);
  @override
  _i6.Future<bool> checkLocationPermission() => (super.noSuchMethod(
        Invocation.method(
          #checkLocationPermission,
          [],
        ),
        returnValue: _i6.Future<bool>.value(false),
      ) as _i6.Future<bool>);
  @override
  _i6.Future<_i2.LocationModel> getCurrentPosition(bool? hasPermission) =>
      (super.noSuchMethod(
        Invocation.method(
          #getCurrentPosition,
          [hasPermission],
        ),
        returnValue: _i6.Future<_i2.LocationModel>.value(_FakeLocationModel_0(
          this,
          Invocation.method(
            #getCurrentPosition,
            [hasPermission],
          ),
        )),
      ) as _i6.Future<_i2.LocationModel>);
  @override
  _i6.Future<_i6.Stream<_i7.Location>> getLocationStream(bool? hasPermission) =>
      (super.noSuchMethod(
        Invocation.method(
          #getLocationStream,
          [hasPermission],
        ),
        returnValue: _i6.Future<_i6.Stream<_i7.Location>>.value(
            _i6.Stream<_i7.Location>.empty()),
      ) as _i6.Future<_i6.Stream<_i7.Location>>);
}

/// A class which mocks [FirestoreAdapterImpl].
///
/// See the documentation for Mockito's code generation for more information.
class MockFirestoreAdapterImpl extends _i1.Mock
    implements _i8.FirestoreAdapterImpl {
  MockFirestoreAdapterImpl() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i3.FirebaseFirestore get firestore => (super.noSuchMethod(
        Invocation.getter(#firestore),
        returnValue: _FakeFirebaseFirestore_1(
          this,
          Invocation.getter(#firestore),
        ),
      ) as _i3.FirebaseFirestore);
  @override
  _i6.Future<_i3.DocumentReference<Object?>> addDocument(
    String? documentPath,
    Map<String, dynamic>? payload,
  ) =>
      (super.noSuchMethod(
        Invocation.method(
          #addDocument,
          [
            documentPath,
            payload,
          ],
        ),
        returnValue: _i6.Future<_i3.DocumentReference<Object?>>.value(
            _FakeDocumentReference_2<Object?>(
          this,
          Invocation.method(
            #addDocument,
            [
              documentPath,
              payload,
            ],
          ),
        )),
      ) as _i6.Future<_i3.DocumentReference<Object?>>);
  @override
  _i6.Future<void> deleteDocument(String? documentPath) => (super.noSuchMethod(
        Invocation.method(
          #deleteDocument,
          [documentPath],
        ),
        returnValue: _i6.Future<void>.value(),
        returnValueForMissingStub: _i6.Future<void>.value(),
      ) as _i6.Future<void>);
  @override
  _i6.Future<_i3.DocumentSnapshot<Object?>> getDocument(String? documentPath) =>
      (super.noSuchMethod(
        Invocation.method(
          #getDocument,
          [documentPath],
        ),
        returnValue: _i6.Future<_i3.DocumentSnapshot<Object?>>.value(
            _FakeDocumentSnapshot_3<Object?>(
          this,
          Invocation.method(
            #getDocument,
            [documentPath],
          ),
        )),
      ) as _i6.Future<_i3.DocumentSnapshot<Object?>>);
  @override
  _i6.Future<List<_i3.QueryDocumentSnapshot<Object?>>> runQuery(
          _i3.Query<Object?>? query) =>
      (super.noSuchMethod(
        Invocation.method(
          #runQuery,
          [query],
        ),
        returnValue: _i6.Future<List<_i3.QueryDocumentSnapshot<Object?>>>.value(
            <_i3.QueryDocumentSnapshot<Object?>>[]),
      ) as _i6.Future<List<_i3.QueryDocumentSnapshot<Object?>>>);
  @override
  _i6.Future<_i3.DocumentReference<Object?>> updateDocument(
    String? documentPath,
    Map<String, dynamic>? payload,
  ) =>
      (super.noSuchMethod(
        Invocation.method(
          #updateDocument,
          [
            documentPath,
            payload,
          ],
        ),
        returnValue: _i6.Future<_i3.DocumentReference<Object?>>.value(
            _FakeDocumentReference_2<Object?>(
          this,
          Invocation.method(
            #updateDocument,
            [
              documentPath,
              payload,
            ],
          ),
        )),
      ) as _i6.Future<_i3.DocumentReference<Object?>>);
}

/// A class which mocks [DocumentReference].
///
/// See the documentation for Mockito's code generation for more information.
// ignore: must_be_immutable
class MockDocumentReference<T extends Object?> extends _i1.Mock
    implements _i3.DocumentReference<T> {
  MockDocumentReference() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i3.FirebaseFirestore get firestore => (super.noSuchMethod(
        Invocation.getter(#firestore),
        returnValue: _FakeFirebaseFirestore_1(
          this,
          Invocation.getter(#firestore),
        ),
      ) as _i3.FirebaseFirestore);
  @override
  String get id => (super.noSuchMethod(
        Invocation.getter(#id),
        returnValue: '',
      ) as String);
  @override
  _i3.CollectionReference<T> get parent => (super.noSuchMethod(
        Invocation.getter(#parent),
        returnValue: _FakeCollectionReference_4<T>(
          this,
          Invocation.getter(#parent),
        ),
      ) as _i3.CollectionReference<T>);
  @override
  String get path => (super.noSuchMethod(
        Invocation.getter(#path),
        returnValue: '',
      ) as String);
  @override
  _i3.CollectionReference<Map<String, dynamic>> collection(
          String? collectionPath) =>
      (super.noSuchMethod(
        Invocation.method(
          #collection,
          [collectionPath],
        ),
        returnValue: _FakeCollectionReference_4<Map<String, dynamic>>(
          this,
          Invocation.method(
            #collection,
            [collectionPath],
          ),
        ),
      ) as _i3.CollectionReference<Map<String, dynamic>>);
  @override
  _i6.Future<void> delete() => (super.noSuchMethod(
        Invocation.method(
          #delete,
          [],
        ),
        returnValue: _i6.Future<void>.value(),
        returnValueForMissingStub: _i6.Future<void>.value(),
      ) as _i6.Future<void>);
  @override
  _i6.Future<void> update(Map<Object, Object?>? data) => (super.noSuchMethod(
        Invocation.method(
          #update,
          [data],
        ),
        returnValue: _i6.Future<void>.value(),
        returnValueForMissingStub: _i6.Future<void>.value(),
      ) as _i6.Future<void>);
  @override
  _i6.Future<_i3.DocumentSnapshot<T>> get([_i3.GetOptions? options]) =>
      (super.noSuchMethod(
        Invocation.method(
          #get,
          [options],
        ),
        returnValue: _i6.Future<_i3.DocumentSnapshot<T>>.value(
            _FakeDocumentSnapshot_3<T>(
          this,
          Invocation.method(
            #get,
            [options],
          ),
        )),
      ) as _i6.Future<_i3.DocumentSnapshot<T>>);
  @override
  _i6.Stream<_i3.DocumentSnapshot<T>> snapshots(
          {bool? includeMetadataChanges = false}) =>
      (super.noSuchMethod(
        Invocation.method(
          #snapshots,
          [],
          {#includeMetadataChanges: includeMetadataChanges},
        ),
        returnValue: _i6.Stream<_i3.DocumentSnapshot<T>>.empty(),
      ) as _i6.Stream<_i3.DocumentSnapshot<T>>);
  @override
  _i6.Future<void> set(
    T? data, [
    _i3.SetOptions? options,
  ]) =>
      (super.noSuchMethod(
        Invocation.method(
          #set,
          [
            data,
            options,
          ],
        ),
        returnValue: _i6.Future<void>.value(),
        returnValueForMissingStub: _i6.Future<void>.value(),
      ) as _i6.Future<void>);
  @override
  _i3.DocumentReference<R> withConverter<R>({
    required _i3.FromFirestore<R>? fromFirestore,
    required _i3.ToFirestore<R>? toFirestore,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #withConverter,
          [],
          {
            #fromFirestore: fromFirestore,
            #toFirestore: toFirestore,
          },
        ),
        returnValue: _FakeDocumentReference_2<R>(
          this,
          Invocation.method(
            #withConverter,
            [],
            {
              #fromFirestore: fromFirestore,
              #toFirestore: toFirestore,
            },
          ),
        ),
      ) as _i3.DocumentReference<R>);
}

/// A class which mocks [HiveAdapter].
///
/// See the documentation for Mockito's code generation for more information.
class MockHiveAdapter<T> extends _i1.Mock implements _i9.HiveAdapter<T> {
  MockHiveAdapter() {
    _i1.throwOnMissingStub(this);
  }

  @override
  String get boxName => (super.noSuchMethod(
        Invocation.getter(#boxName),
        returnValue: '',
      ) as String);
  @override
  _i4.HiveInterface get hive => (super.noSuchMethod(
        Invocation.getter(#hive),
        returnValue: _FakeHiveInterface_5(
          this,
          Invocation.getter(#hive),
        ),
      ) as _i4.HiveInterface);
  @override
  _i6.Future<void> init() => (super.noSuchMethod(
        Invocation.method(
          #init,
          [],
        ),
        returnValue: _i6.Future<void>.value(),
        returnValueForMissingStub: _i6.Future<void>.value(),
      ) as _i6.Future<void>);
  @override
  _i6.Future<void> close() => (super.noSuchMethod(
        Invocation.method(
          #close,
          [],
        ),
        returnValue: _i6.Future<void>.value(),
        returnValueForMissingStub: _i6.Future<void>.value(),
      ) as _i6.Future<void>);
  @override
  _i6.Future<T?> get(String? id) => (super.noSuchMethod(
        Invocation.method(
          #get,
          [id],
        ),
        returnValue: _i6.Future<T?>.value(),
      ) as _i6.Future<T?>);
  @override
  Iterable<dynamic> getKeys() => (super.noSuchMethod(
        Invocation.method(
          #getKeys,
          [],
        ),
        returnValue: <dynamic>[],
      ) as Iterable<dynamic>);
  @override
  _i6.Future<void> put(
    String? id,
    T? payload,
  ) =>
      (super.noSuchMethod(
        Invocation.method(
          #put,
          [
            id,
            payload,
          ],
        ),
        returnValue: _i6.Future<void>.value(),
        returnValueForMissingStub: _i6.Future<void>.value(),
      ) as _i6.Future<void>);
  @override
  _i6.Future<void> delete(String? id) => (super.noSuchMethod(
        Invocation.method(
          #delete,
          [id],
        ),
        returnValue: _i6.Future<void>.value(),
        returnValueForMissingStub: _i6.Future<void>.value(),
      ) as _i6.Future<void>);
  @override
  _i6.Future<void> deleteAll() => (super.noSuchMethod(
        Invocation.method(
          #deleteAll,
          [],
        ),
        returnValue: _i6.Future<void>.value(),
        returnValueForMissingStub: _i6.Future<void>.value(),
      ) as _i6.Future<void>);
}
