// Mocks generated by Mockito 5.4.0 from annotations
// in forest_map/test/features/organization/data/repositories/organization_repository_impl_test.dart.
// Do not manually edit this file.

// ignore_for_file: no_leading_underscores_for_library_prefixes
import 'dart:async' as _i4;
import 'dart:io' as _i6;

import 'package:data_connection_checker_nulls/data_connection_checker_nulls.dart'
    as _i12;
import 'package:forest_map/core/enums/organization_member_status.dart' as _i8;
import 'package:forest_map/core/enums/organization_role_types.dart' as _i7;
import 'package:forest_map/core/platform/network_info.dart' as _i11;
import 'package:forest_map/features/organization/data/datasources/organization_local_data_source.dart'
    as _i9;
import 'package:forest_map/features/organization/data/datasources/organization_remote_data_source.dart'
    as _i3;
import 'package:forest_map/features/organization/data/models/organization_model.dart'
    as _i2;
import 'package:forest_map/features/organization/domain/entities/organization.dart'
    as _i10;
import 'package:forest_map/features/user/data/models/user_model.dart' as _i5;
import 'package:mockito/mockito.dart' as _i1;

// ignore_for_file: type=lint
// ignore_for_file: avoid_redundant_argument_values
// ignore_for_file: avoid_setters_without_getters
// ignore_for_file: comment_references
// ignore_for_file: implementation_imports
// ignore_for_file: invalid_use_of_visible_for_testing_member
// ignore_for_file: prefer_const_constructors
// ignore_for_file: unnecessary_parenthesis
// ignore_for_file: camel_case_types
// ignore_for_file: subtype_of_sealed_class

class _FakeOrganizationModel_0 extends _i1.SmartFake
    implements _i2.OrganizationModel {
  _FakeOrganizationModel_0(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

/// A class which mocks [OrganizationRemoteDataSource].
///
/// See the documentation for Mockito's code generation for more information.
class MockOrganizationRemoteDataSource extends _i1.Mock
    implements _i3.OrganizationRemoteDataSource {
  MockOrganizationRemoteDataSource() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i4.Future<_i2.OrganizationModel> createOrganization({
    required _i5.UserModel? user,
    required String? name,
    required String? email,
    required String? phone,
    _i6.File? avatar,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #createOrganization,
          [],
          {
            #user: user,
            #name: name,
            #email: email,
            #phone: phone,
            #avatar: avatar,
          },
        ),
        returnValue:
            _i4.Future<_i2.OrganizationModel>.value(_FakeOrganizationModel_0(
          this,
          Invocation.method(
            #createOrganization,
            [],
            {
              #user: user,
              #name: name,
              #email: email,
              #phone: phone,
              #avatar: avatar,
            },
          ),
        )),
      ) as _i4.Future<_i2.OrganizationModel>);
  @override
  _i4.Future<_i2.OrganizationModel> getOrganization(String? id) =>
      (super.noSuchMethod(
        Invocation.method(
          #getOrganization,
          [id],
        ),
        returnValue:
            _i4.Future<_i2.OrganizationModel>.value(_FakeOrganizationModel_0(
          this,
          Invocation.method(
            #getOrganization,
            [id],
          ),
        )),
      ) as _i4.Future<_i2.OrganizationModel>);
  @override
  _i4.Future<_i2.OrganizationModel> updateOrganization({
    required String? id,
    required String? name,
    required String? email,
    required String? phone,
    _i6.File? avatar,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #updateOrganization,
          [],
          {
            #id: id,
            #name: name,
            #email: email,
            #phone: phone,
            #avatar: avatar,
          },
        ),
        returnValue:
            _i4.Future<_i2.OrganizationModel>.value(_FakeOrganizationModel_0(
          this,
          Invocation.method(
            #updateOrganization,
            [],
            {
              #id: id,
              #name: name,
              #email: email,
              #phone: phone,
              #avatar: avatar,
            },
          ),
        )),
      ) as _i4.Future<_i2.OrganizationModel>);
  @override
  _i4.Future<void> deleteOrganization(String? id) => (super.noSuchMethod(
        Invocation.method(
          #deleteOrganization,
          [id],
        ),
        returnValue: _i4.Future<void>.value(),
        returnValueForMissingStub: _i4.Future<void>.value(),
      ) as _i4.Future<void>);
  @override
  _i4.Future<_i2.OrganizationModel> addMember({
    required String? id,
    required _i5.UserModel? user,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #addMember,
          [],
          {
            #id: id,
            #user: user,
          },
        ),
        returnValue:
            _i4.Future<_i2.OrganizationModel>.value(_FakeOrganizationModel_0(
          this,
          Invocation.method(
            #addMember,
            [],
            {
              #id: id,
              #user: user,
            },
          ),
        )),
      ) as _i4.Future<_i2.OrganizationModel>);
  @override
  _i4.Future<_i2.OrganizationModel> removeMember({
    required String? id,
    required String? userId,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #removeMember,
          [],
          {
            #id: id,
            #userId: userId,
          },
        ),
        returnValue:
            _i4.Future<_i2.OrganizationModel>.value(_FakeOrganizationModel_0(
          this,
          Invocation.method(
            #removeMember,
            [],
            {
              #id: id,
              #userId: userId,
            },
          ),
        )),
      ) as _i4.Future<_i2.OrganizationModel>);
  @override
  _i4.Future<_i2.OrganizationModel> updateMember({
    required String? id,
    required String? userId,
    _i7.OrganizationRoleType? role,
    _i8.OrganizationMemberStatus? status,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #updateMember,
          [],
          {
            #id: id,
            #userId: userId,
            #role: role,
            #status: status,
          },
        ),
        returnValue:
            _i4.Future<_i2.OrganizationModel>.value(_FakeOrganizationModel_0(
          this,
          Invocation.method(
            #updateMember,
            [],
            {
              #id: id,
              #userId: userId,
              #role: role,
              #status: status,
            },
          ),
        )),
      ) as _i4.Future<_i2.OrganizationModel>);
}

/// A class which mocks [OrganizationLocalDataSource].
///
/// See the documentation for Mockito's code generation for more information.
class MockOrganizationLocalDataSource extends _i1.Mock
    implements _i9.OrganizationLocalDataSource {
  MockOrganizationLocalDataSource() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i4.Future<_i2.OrganizationModel?> getOrganization(String? id) =>
      (super.noSuchMethod(
        Invocation.method(
          #getOrganization,
          [id],
        ),
        returnValue: _i4.Future<_i2.OrganizationModel?>.value(),
      ) as _i4.Future<_i2.OrganizationModel?>);
  @override
  _i4.Future<void> saveOrganization({
    String? id,
    _i10.Organization? organization,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #saveOrganization,
          [],
          {
            #id: id,
            #organization: organization,
          },
        ),
        returnValue: _i4.Future<void>.value(),
        returnValueForMissingStub: _i4.Future<void>.value(),
      ) as _i4.Future<void>);
}

/// A class which mocks [NetworkInfo].
///
/// See the documentation for Mockito's code generation for more information.
class MockNetworkInfo extends _i1.Mock implements _i11.NetworkInfo {
  MockNetworkInfo() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i4.Future<bool> get isConnected => (super.noSuchMethod(
        Invocation.getter(#isConnected),
        returnValue: _i4.Future<bool>.value(false),
      ) as _i4.Future<bool>);
  @override
  _i4.Future<bool> get isWifi => (super.noSuchMethod(
        Invocation.getter(#isWifi),
        returnValue: _i4.Future<bool>.value(false),
      ) as _i4.Future<bool>);
  @override
  _i4.Stream<_i12.DataConnectionStatus> get connectionStatusStream =>
      (super.noSuchMethod(
        Invocation.getter(#connectionStatusStream),
        returnValue: _i4.Stream<_i12.DataConnectionStatus>.empty(),
      ) as _i4.Stream<_i12.DataConnectionStatus>);
}
