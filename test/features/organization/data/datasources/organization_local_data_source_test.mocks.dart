// Mocks generated by Mockito 5.4.0 from annotations
// in forest_map/test/features/organization/data/datasources/organization_local_data_source_test.dart.
// Do not manually edit this file.

// ignore_for_file: no_leading_underscores_for_library_prefixes
import 'dart:async' as _i4;

import 'package:forest_map/core/adapters/hive_adapter.dart' as _i3;
import 'package:hive/hive.dart' as _i2;
import 'package:mockito/mockito.dart' as _i1;

// ignore_for_file: type=lint
// ignore_for_file: avoid_redundant_argument_values
// ignore_for_file: avoid_setters_without_getters
// ignore_for_file: comment_references
// ignore_for_file: implementation_imports
// ignore_for_file: invalid_use_of_visible_for_testing_member
// ignore_for_file: prefer_const_constructors
// ignore_for_file: unnecessary_parenthesis
// ignore_for_file: camel_case_types
// ignore_for_file: subtype_of_sealed_class

class _FakeHiveInterface_0 extends _i1.SmartFake implements _i2.HiveInterface {
  _FakeHiveInterface_0(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

/// A class which mocks [HiveAdapter].
///
/// See the documentation for Mockito's code generation for more information.
class MockHiveAdapter<T> extends _i1.Mock implements _i3.HiveAdapter<T> {
  MockHiveAdapter() {
    _i1.throwOnMissingStub(this);
  }

  @override
  String get boxName => (super.noSuchMethod(
        Invocation.getter(#boxName),
        returnValue: '',
      ) as String);
  @override
  _i2.HiveInterface get hive => (super.noSuchMethod(
        Invocation.getter(#hive),
        returnValue: _FakeHiveInterface_0(
          this,
          Invocation.getter(#hive),
        ),
      ) as _i2.HiveInterface);
  @override
  _i4.Future<void> init() => (super.noSuchMethod(
        Invocation.method(
          #init,
          [],
        ),
        returnValue: _i4.Future<void>.value(),
        returnValueForMissingStub: _i4.Future<void>.value(),
      ) as _i4.Future<void>);
  @override
  _i4.Future<void> close() => (super.noSuchMethod(
        Invocation.method(
          #close,
          [],
        ),
        returnValue: _i4.Future<void>.value(),
        returnValueForMissingStub: _i4.Future<void>.value(),
      ) as _i4.Future<void>);
  @override
  _i4.Future<T?> get(String? id) => (super.noSuchMethod(
        Invocation.method(
          #get,
          [id],
        ),
        returnValue: _i4.Future<T?>.value(),
      ) as _i4.Future<T?>);
  @override
  Iterable<dynamic> getKeys() => (super.noSuchMethod(
        Invocation.method(
          #getKeys,
          [],
        ),
        returnValue: <dynamic>[],
      ) as Iterable<dynamic>);
  @override
  _i4.Future<void> put(
    String? id,
    T? payload,
  ) =>
      (super.noSuchMethod(
        Invocation.method(
          #put,
          [
            id,
            payload,
          ],
        ),
        returnValue: _i4.Future<void>.value(),
        returnValueForMissingStub: _i4.Future<void>.value(),
      ) as _i4.Future<void>);
  @override
  _i4.Future<void> delete(String? id) => (super.noSuchMethod(
        Invocation.method(
          #delete,
          [id],
        ),
        returnValue: _i4.Future<void>.value(),
        returnValueForMissingStub: _i4.Future<void>.value(),
      ) as _i4.Future<void>);
  @override
  _i4.Future<void> deleteAll() => (super.noSuchMethod(
        Invocation.method(
          #deleteAll,
          [],
        ),
        returnValue: _i4.Future<void>.value(),
        returnValueForMissingStub: _i4.Future<void>.value(),
      ) as _i4.Future<void>);
}
