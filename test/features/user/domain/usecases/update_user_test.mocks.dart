// Mocks generated by Mockito 5.4.0 from annotations
// in forest_map/test/features/user/domain/usecases/update_user_test.dart.
// Do not manually edit this file.

// ignore_for_file: no_leading_underscores_for_library_prefixes
import 'dart:async' as _i4;
import 'dart:io' as _i8;

import 'package:dartz/dartz.dart' as _i2;
import 'package:forest_map/core/errors/failure.dart' as _i5;
import 'package:forest_map/features/organization/domain/entities/organization.dart'
    as _i7;
import 'package:forest_map/features/user/domain/entities/user.dart' as _i6;
import 'package:forest_map/features/user/domain/repository/user_repository.dart'
    as _i3;
import 'package:mockito/mockito.dart' as _i1;

// ignore_for_file: type=lint
// ignore_for_file: avoid_redundant_argument_values
// ignore_for_file: avoid_setters_without_getters
// ignore_for_file: comment_references
// ignore_for_file: implementation_imports
// ignore_for_file: invalid_use_of_visible_for_testing_member
// ignore_for_file: prefer_const_constructors
// ignore_for_file: unnecessary_parenthesis
// ignore_for_file: camel_case_types
// ignore_for_file: subtype_of_sealed_class

class _FakeEither_0<L, R> extends _i1.SmartFake implements _i2.Either<L, R> {
  _FakeEither_0(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

/// A class which mocks [UserRepository].
///
/// See the documentation for Mockito's code generation for more information.
class MockUserRepository extends _i1.Mock implements _i3.UserRepository {
  MockUserRepository() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i4.Future<_i2.Either<_i5.Failure, _i6.User?>> getUser({
    String? id,
    bool? searchLocally,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #getUser,
          [],
          {
            #id: id,
            #searchLocally: searchLocally,
          },
        ),
        returnValue: _i4.Future<_i2.Either<_i5.Failure, _i6.User?>>.value(
            _FakeEither_0<_i5.Failure, _i6.User?>(
          this,
          Invocation.method(
            #getUser,
            [],
            {
              #id: id,
              #searchLocally: searchLocally,
            },
          ),
        )),
      ) as _i4.Future<_i2.Either<_i5.Failure, _i6.User?>>);
  @override
  _i4.Future<_i2.Either<_i5.Failure, _i6.User>> updateUser({
    String? id,
    String? name,
    String? email,
    List<_i7.Organization>? organizations,
    _i8.File? avatar,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #updateUser,
          [],
          {
            #id: id,
            #name: name,
            #email: email,
            #organizations: organizations,
            #avatar: avatar,
          },
        ),
        returnValue: _i4.Future<_i2.Either<_i5.Failure, _i6.User>>.value(
            _FakeEither_0<_i5.Failure, _i6.User>(
          this,
          Invocation.method(
            #updateUser,
            [],
            {
              #id: id,
              #name: name,
              #email: email,
              #organizations: organizations,
              #avatar: avatar,
            },
          ),
        )),
      ) as _i4.Future<_i2.Either<_i5.Failure, _i6.User>>);
}
