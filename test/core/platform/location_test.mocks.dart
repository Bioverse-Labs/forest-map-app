// Mocks generated by Mockito 5.4.0 from annotations
// in forest_map/test/core/platform/location_test.dart.
// Do not manually edit this file.

// ignore_for_file: no_leading_underscores_for_library_prefixes
import 'dart:async' as _i4;

import 'package:forest_map/core/platform/location.dart' as _i3;
import 'package:forest_map/core/util/localized_string.dart' as _i5;
import 'package:geolocator/geolocator.dart' as _i2;
import 'package:mockito/mockito.dart' as _i1;

// ignore_for_file: type=lint
// ignore_for_file: avoid_redundant_argument_values
// ignore_for_file: avoid_setters_without_getters
// ignore_for_file: comment_references
// ignore_for_file: implementation_imports
// ignore_for_file: invalid_use_of_visible_for_testing_member
// ignore_for_file: prefer_const_constructors
// ignore_for_file: unnecessary_parenthesis
// ignore_for_file: camel_case_types
// ignore_for_file: subtype_of_sealed_class

class _FakePosition_0 extends _i1.SmartFake implements _i2.Position {
  _FakePosition_0(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

/// A class which mocks [LocationSource].
///
/// See the documentation for Mockito's code generation for more information.
class MockLocationSource extends _i1.Mock implements _i3.LocationSource {
  MockLocationSource() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i4.Future<bool> get isLocationServiceEnabled => (super.noSuchMethod(
        Invocation.getter(#isLocationServiceEnabled),
        returnValue: _i4.Future<bool>.value(false),
      ) as _i4.Future<bool>);
  @override
  _i4.Future<_i2.LocationPermission> getPermission() => (super.noSuchMethod(
        Invocation.method(
          #getPermission,
          [],
        ),
        returnValue: _i4.Future<_i2.LocationPermission>.value(
            _i2.LocationPermission.denied),
      ) as _i4.Future<_i2.LocationPermission>);
  @override
  _i4.Future<_i2.LocationPermission> checkPermission() => (super.noSuchMethod(
        Invocation.method(
          #checkPermission,
          [],
        ),
        returnValue: _i4.Future<_i2.LocationPermission>.value(
            _i2.LocationPermission.denied),
      ) as _i4.Future<_i2.LocationPermission>);
  @override
  _i4.Future<_i2.Position> getCurrentPosition() => (super.noSuchMethod(
        Invocation.method(
          #getCurrentPosition,
          [],
        ),
        returnValue: _i4.Future<_i2.Position>.value(_FakePosition_0(
          this,
          Invocation.method(
            #getCurrentPosition,
            [],
          ),
        )),
      ) as _i4.Future<_i2.Position>);
  @override
  _i4.Future<_i2.Position?> getLastKnowPosition() => (super.noSuchMethod(
        Invocation.method(
          #getLastKnowPosition,
          [],
        ),
        returnValue: _i4.Future<_i2.Position?>.value(),
      ) as _i4.Future<_i2.Position?>);
  @override
  _i4.Stream<_i2.Position> getPositionStream() => (super.noSuchMethod(
        Invocation.method(
          #getPositionStream,
          [],
        ),
        returnValue: _i4.Stream<_i2.Position>.empty(),
      ) as _i4.Stream<_i2.Position>);
}

/// A class which mocks [LocalizedString].
///
/// See the documentation for Mockito's code generation for more information.
class MockLocalizedString extends _i1.Mock implements _i5.LocalizedString {
  MockLocalizedString() {
    _i1.throwOnMissingStub(this);
  }

  @override
  String getLocalizedString(
    String? identifier, {
    Map<String, String?>? namedArgs,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #getLocalizedString,
          [identifier],
          {#namedArgs: namedArgs},
        ),
        returnValue: '',
      ) as String);
}
